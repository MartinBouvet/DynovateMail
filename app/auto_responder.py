#!/usr/bin/env python3
"""
Auto Responder - R√©ponses automatiques aux emails
"""
import logging
from typing import Optional
from datetime import datetime, timedelta

from app.gmail_client import GmailClient
from app.ai_processor import AIProcessor
from app.models.email_model import Email

logger = logging.getLogger(__name__)

class AutoResponder:
    """Gestionnaire de r√©ponses automatiques."""
    
    def __init__(self, gmail_client: GmailClient, ai_processor: AIProcessor):
        """
        Initialise l'auto-responder.
        
        Args:
            gmail_client: Client Gmail
            ai_processor: Processeur IA
        """
        self.gmail_client = gmail_client
        self.ai_processor = ai_processor
        self.enabled = False
        self.responded_emails = set()
        self.last_check = datetime.now()
        
        logger.info("AutoResponder initialis√© avec s√©curit√© renforc√©e")
    
    def enable(self):
        """Active les r√©ponses automatiques."""
        self.enabled = True
        logger.info("‚úÖ R√©ponses automatiques activ√©es")
    
    def disable(self):
        """D√©sactive les r√©ponses automatiques."""
        self.enabled = False
        logger.info("‚õî R√©ponses automatiques d√©sactiv√©es")
    
    def should_respond(self, email: Email) -> bool:
        """
        D√©termine si on doit r√©pondre automatiquement √† cet email.
        
        Args:
            email: Email √† analyser
            
        Returns:
            True si on doit r√©pondre, False sinon
        """
        if not self.enabled:
            return False
        
        # Ne pas r√©pondre si d√©j√† r√©pondu
        if email.id in self.responded_emails:
            return False
        
        # Ne pas r√©pondre aux emails envoy√©s
        if 'SENT' in email.labels:
            return False
        
        # Ne pas r√©pondre aux newsletters
        sender_lower = (email.sender or '').lower()
        if 'noreply' in sender_lower or 'no-reply' in sender_lower:
            return False
        
        # Ne pas r√©pondre au spam
        if 'SPAM' in email.labels:
            return False
        
        # Analyser avec l'IA
        try:
            analysis = self.ai_processor.analyze_email(email)
            category = analysis.get('category', '')
            
            # R√©pondre aux CVs et demandes de support
            if category in ['cv', 'support', 'meeting']:
                return True
        
        except Exception as e:
            logger.error(f"Erreur analyse pour auto-r√©ponse: {e}")
        
        return False
    
    def generate_response(self, email: Email) -> Optional[str]:
        """
        G√©n√®re une r√©ponse automatique.
        
        Args:
            email: Email auquel r√©pondre
            
        Returns:
            Texte de la r√©ponse ou None
        """
        try:
            # Analyser l'email
            analysis = self.ai_processor.analyze_email(email)
            category = analysis.get('category', 'work')
            
            # Templates selon la cat√©gorie
            if category == 'cv':
                response = self._generate_cv_response(email)
            elif category == 'support':
                response = self._generate_support_response(email)
            elif category == 'meeting':
                response = self._generate_meeting_response(email)
            else:
                response = self._generate_generic_response(email)
            
            logger.info(f"‚úÖ R√©ponse g√©n√©r√©e pour cat√©gorie: {category}")
            return response
        
        except Exception as e:
            logger.error(f"Erreur g√©n√©ration r√©ponse: {e}")
            return None
    
    def _generate_cv_response(self, email: Email) -> str:
        """G√©n√®re une r√©ponse pour une candidature."""
        return f"""Bonjour,

Nous avons bien re√ßu votre candidature et nous vous en remercions.

Votre profil sera √©tudi√© avec attention par notre √©quipe et nous reviendrons vers vous dans les plus brefs d√©lais.

Cordialement,
L'√©quipe de recrutement"""
    
    def _generate_support_response(self, email: Email) -> str:
        """G√©n√®re une r√©ponse pour une demande de support."""
        return f"""Bonjour,

Nous avons bien re√ßu votre demande de support.

Notre √©quipe va l'examiner et vous apportera une r√©ponse dans les meilleurs d√©lais.

Merci de votre patience.

Cordialement,
L'√©quipe support"""
    
    def _generate_meeting_response(self, email: Email) -> str:
        """G√©n√®re une r√©ponse pour une demande de r√©union."""
        return f"""Bonjour,

Nous avons bien re√ßu votre demande de r√©union.

Nous allons v√©rifier nos disponibilit√©s et reviendrons vers vous rapidement pour convenir d'un cr√©neau.

Cordialement"""
    
    def _generate_generic_response(self, email: Email) -> str:
        """G√©n√®re une r√©ponse g√©n√©rique."""
        # Utiliser l'IA pour g√©n√©rer une r√©ponse personnalis√©e
        try:
            response = self.ai_processor.generate_response(email, tone='professional')
            return response
        except:
            return f"""Bonjour,

Nous avons bien re√ßu votre message et nous vous en remercions.

Nous reviendrons vers vous dans les plus brefs d√©lais.

Cordialement"""
    
    def send_auto_response(self, email: Email) -> bool:
        """
        Envoie une r√©ponse automatique.
        
        Args:
            email: Email auquel r√©pondre
            
        Returns:
            True si envoy√©, False sinon
        """
        try:
            if not self.should_respond(email):
                return False
            
            # G√©n√©rer la r√©ponse
            response_body = self.generate_response(email)
            
            if not response_body:
                return False
            
            # Envoyer la r√©ponse
            subject = f"Re: {email.subject}" if email.subject else "Re: Votre message"
            
            success = self.gmail_client.send_email(
                to=email.sender,
                subject=subject,
                body=response_body
            )
            
            if success:
                # Marquer comme r√©pondu
                self.responded_emails.add(email.id)
                logger.info(f"‚úÖ R√©ponse automatique envoy√©e √† {email.sender}")
                return True
            else:
                logger.error(f"‚ùå √âchec envoi r√©ponse √† {email.sender}")
                return False
        
        except Exception as e:
            logger.error(f"Erreur envoi auto-r√©ponse: {e}")
            return False
    
    def check_and_respond(self, max_emails: int = 10) -> int:
        """
        V√©rifie les nouveaux emails et r√©pond automatiquement si n√©cessaire.
        
        Args:
            max_emails: Nombre maximum d'emails √† traiter
            
        Returns:
            Nombre de r√©ponses envoy√©es
        """
        if not self.enabled:
            return 0
        
        try:
            # R√©cup√©rer les emails r√©cents non lus
            emails = self.gmail_client.list_emails(
                folder="INBOX",
                max_results=max_emails
            )
            
            # Filtrer les non lus
            unread_emails = [e for e in emails if not getattr(e, 'read', True)]
            
            responses_sent = 0
            
            for email in unread_emails:
                if self.send_auto_response(email):
                    responses_sent += 1
            
            self.last_check = datetime.now()
            
            if responses_sent > 0:
                logger.info(f"‚úÖ {responses_sent} r√©ponses automatiques envoy√©es")
            
            return responses_sent
        
        except Exception as e:
            logger.error(f"Erreur v√©rification auto-r√©ponse: {e}")
            return 0
    
    def get_stats(self) -> dict:
        """
        R√©cup√®re les statistiques des r√©ponses automatiques.
        
        Returns:
            Dictionnaire avec les stats
        """
        return {
            'enabled': self.enabled,
            'total_responses': len(self.responded_emails),
            'last_check': self.last_check.isoformat() if self.last_check else None
        }
    
    def reset_stats(self):
        """R√©initialise les statistiques."""
        self.responded_emails.clear()
        logger.info("üìä Statistiques r√©initialis√©es")
    
    def is_enabled(self) -> bool:
        """V√©rifie si l'auto-responder est activ√©."""
        return self.enabled